operator[]: Query or Mutator?
The operator[]() in our Collection class is designed as a mutator to allow modification of elements in the m_items array. However, we need to explore if it can be transformed into a query.

Experiment
To determine whether operator[]() can be a query, we implemented it as follows:

cpp
Copy code
const T& operator[](unsigned int index) const
{
    return m_items[index];
}
This implementation returns a constant reference to the element at the specified index, preventing any modification of the array element through this operator.

Results
After implementing and testing, we found that:

Compilation: The code compiles without errors.
Runtime Behavior: When attempting to modify an element using the operator[]() (e.g., collection[index] = newValue;), the compiler produces an error, indicating that the element cannot be modified.
Conclusion
Based on our experiment, it is possible to make operator[]() a query by returning a constant reference. This ensures that the elements cannot be modified, thus maintaining the integrity of the collection when read-only access is intended. However, in scenarios where modification is necessary, the mutator version should be used.

Definitions and Implementations in Header File
The definitions and implementations of the Collection and OrderedCollection class templates are included in the header file. This is necessary because:

Template Instantiation: The compiler needs to see the full definition of the template in every translation unit where it is instantiated.
Linker Issues: If the template implementation is separated into a .cpp file, the linker may not be able to find the template definitions during the instantiation process.
Workaround
One possible workaround to include implementations in .cpp files is to explicitly instantiate the templates for specific types at the end of the .cpp file. However, this approach is limited as it requires foreknowledge of all types that will be used with the template.

Book Class Additions
The Book class required several additional member functions to support the Collection and OrderedCollection modules, such as comparison operators (<, >, ==), and a constructor to initialize member variables. These additions were necessary to:

Comparison: Enable the collection to determine the smallest and largest items.
Initialization: Ensure the Book objects are properly initialized and validated.
Without these functions, the collection classes would not function correctly with Book objects.

Smallest and Largest Item Functions
The functions getSmallestItem() and getLargestItem() are implemented as queries. Although they return static class members and do not modify any values, they are crucial for retrieving the current smallest and largest items across all instances of the collection.

Reason for Non-Query Nature
While these functions do not change the value of any member, they are classified as non-queries because:

Static State Management: They depend on the static state managed by the collection class, which can be influenced by any instance of the class.
By maintaining these as static members, we ensure consistency and accuracy in determining the smallest and largest items across all collections of the same type.

Summary
Through these reflections, we gained insights into template specialization, the necessity of header file implementations for templates, and the considerations for designing collection classes. The experiments and implementations helped solidify our understanding of template classes and their behaviors in C++.